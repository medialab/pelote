from typing import Iterable, TypeVar, Generic, Generator, Dict, Any

Attributes = Dict[Any, Any]

NodeKey = TypeVar("NodeKey")

class NodeView(Generic[NodeKey]):
    def __call__(self, data: bool = ...) -> Generator[NodeKey, None, None]: ...
    def __getitem__(self, key: NodeKey) -> Attributes: ...
    def __iter__(self) -> Generator[NodeKey, None, None]: ...

class AbstractGraph(Generic[NodeKey]):
    nodes: NodeView[NodeKey]

    def __iter__(self) -> Generator[NodeKey, None, None]: ...
    def order(self) -> int: ...
    def size(self) -> int: ...
    def add_node(self, key: NodeKey, **kwargs: Any) -> None: ...
    def add_nodes_from(self, nbunch: Iterable[NodeKey]) -> None: ...

class Graph(AbstractGraph[NodeKey]): ...
class DiGraph(AbstractGraph[NodeKey]): ...
class MultiGraph(AbstractGraph[NodeKey]): ...
class MultiDiGraph(AbstractGraph[NodeKey]): ...
